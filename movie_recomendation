import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Load the movie dataset
movies = pd.read_csv('movies.csv')

# Preprocess the data (in this example, we use the 'Genre' and 'Director' columns)
features = ['Genre', 'Director']
for feature in features:
    movies[feature] = movies[feature].fillna('')

# Combine the selected features into a single column
movies['combined_features'] = movies[features].apply(lambda row: ' '.join(row), axis=1)

# Create a TF-IDF vectorizer to convert text data into numerical features
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(movies['combined_features'])

# Compute the cosine similarity between movies
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Function to get movie recommendations based on similarity
def get_recommendations(movie_title, cosine_sim=cosine_sim):
    # Get the index of the movie with the given title
    idx = movies[movies['Title'] == movie_title].index[0]
    
    # Get the pairwise similarity scores for all movies with the given movie
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # Get the top 10 most similar movies (excluding the input movie itself)
    sim_scores = sim_scores[1:11]
    
    # Get the movie indices
    movie_indices = [score[0] for score in sim_scores]
    
    # Return the top 10 recommended movies
    return movies['Title'].iloc[movie_indices]

# Example: Get movie recommendations for a given movie
movie_title = 'The Shawshank Redemption'
recommendations = get_recommendations(movie_title)
print(f"Recommended movies for '{movie_title}':")
print(recommendations)
